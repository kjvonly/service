// Code generated by fertilize; DO NOT EDIT.
package user

import (
  	"encoding/json"
	"fmt"
	"git.launchpad.net/~man4christ/+git/seed/server"
	"git.launchpad.net/~man4christ/+git/seed/validate"
) 
 
// AuthenticateHandler validates input data prior to calling Authenticate
func (h UserServicer) AuthenticateHandler(r server.GenericRequest, b []byte) (any, error) {
	var hr AuthenticateRequest
	if err := json.Unmarshal(b, &hr); err != nil {
		return nil, fmt.Errorf("Unmarshalling data: %w", err)
	}

	if err := validate.Check(hr); err != nil {
		return nil, fmt.Errorf("validating data: %w", err)
	}

	return h.Authenticate(hr, r), nil
} 
// CreateUserHandler validates input data prior to calling CreateUser
func (h UserServicer) CreateUserHandler(r server.GenericRequest, b []byte) (any, error) {
	var hr CreateUserRequest
	if err := json.Unmarshal(b, &hr); err != nil {
		return nil, fmt.Errorf("Unmarshalling data: %w", err)
	}

	if err := validate.Check(hr); err != nil {
		return nil, fmt.Errorf("validating data: %w", err)
	}

	return h.CreateUser(hr, r), nil
} 
// DeleteUserHandler validates input data prior to calling DeleteUser
func (h UserServicer) DeleteUserHandler(r server.GenericRequest, b []byte) (any, error) {
	var hr DeleteUserRequest
	if err := json.Unmarshal(b, &hr); err != nil {
		return nil, fmt.Errorf("Unmarshalling data: %w", err)
	}

	if err := validate.Check(hr); err != nil {
		return nil, fmt.Errorf("validating data: %w", err)
	}

	return h.DeleteUser(hr, r), nil
} 
// QueryUserHandler validates input data prior to calling QueryUser
func (h UserServicer) QueryUserHandler(r server.GenericRequest, b []byte) (any, error) {
	var hr QueryUserRequest
	if err := json.Unmarshal(b, &hr); err != nil {
		return nil, fmt.Errorf("Unmarshalling data: %w", err)
	}

	if err := validate.Check(hr); err != nil {
		return nil, fmt.Errorf("validating data: %w", err)
	}

	return h.QueryUser(hr, r), nil
} 
// QueryUserByEmailHandler validates input data prior to calling QueryUserByEmail
func (h UserServicer) QueryUserByEmailHandler(r server.GenericRequest, b []byte) (any, error) {
	var hr QueryUserByEmailRequest
	if err := json.Unmarshal(b, &hr); err != nil {
		return nil, fmt.Errorf("Unmarshalling data: %w", err)
	}

	if err := validate.Check(hr); err != nil {
		return nil, fmt.Errorf("validating data: %w", err)
	}

	return h.QueryUserByEmail(hr, r), nil
} 
// QueryUserByIDHandler validates input data prior to calling QueryUserByID
func (h UserServicer) QueryUserByIDHandler(r server.GenericRequest, b []byte) (any, error) {
	var hr QueryUserByIDRequest
	if err := json.Unmarshal(b, &hr); err != nil {
		return nil, fmt.Errorf("Unmarshalling data: %w", err)
	}

	if err := validate.Check(hr); err != nil {
		return nil, fmt.Errorf("validating data: %w", err)
	}

	return h.QueryUserByID(hr, r), nil
} 
// UpdateUserHandler validates input data prior to calling UpdateUser
func (h UserServicer) UpdateUserHandler(r server.GenericRequest, b []byte) (any, error) {
	var hr UpdateUserRequest
	if err := json.Unmarshal(b, &hr); err != nil {
		return nil, fmt.Errorf("Unmarshalling data: %w", err)
	}

	if err := validate.Check(hr); err != nil {
		return nil, fmt.Errorf("validating data: %w", err)
	}

	return h.UpdateUser(hr, r), nil
}
